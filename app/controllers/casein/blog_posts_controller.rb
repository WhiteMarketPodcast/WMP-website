# Scaffolding generated by Casein v5.3.0.0

module Casein
  class BlogPostsController < Casein::CaseinController
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_action :needs_admin, except: [:action1, :action2]
    before_action :get_blog_post, only: [:add_translation, :create, :update]

    def index
      @casein_page_title = 'Blog posts'
      @blog_posts = BlogPost.includes(:localized_blog_posts).paginate page: params[:page]
    end

    def show
      @casein_page_title = 'View blog post'
      @blog_post = BlogPost.find(params[:id])
    end

    def new
      @casein_page_title = 'Add a new blog post'
      @blog_post = BlogPost.new
      @localized_blog_post = LocalizedBlogPost.new
    end

    def create
      @localized_post = LocalizedBlogPost.new(blog_post_params[:localized_blog_post])
      @localized_post.blog_post = @blog_post

      binding.pry

      if blog_post_params[:photo]
        @blog_post.update_attributes(photo: blog_post_params[:photo])
      end

      if @localized_post.save
        flash[:notice] = 'Blog post created'
        redirect_to casein_blog_posts_path
      else
        @blog_post.destroy unless @blog_post_id
        flash.now[:warning] = 'There were problems when trying to create a new blog post'
        render action: :new
      end
    end

    def add_translation
      @casein_page_title = 'Add a new translation'
      @localized_blog_post = LocalizedBlogPost.new(blog_post_id: params[:id])
    end

    def create_translation
      LocalizedBlogPost.create(blog_post_params[:localized_blog_post])
      render action: :show
    end

    def update
      @casein_page_title = 'Update blog post'

      @localized_blog_post = LocalizedBlogPost.where(blog_post_id: params[:id], locale: blog_post_params[:locale]).first

      return create_translation unless @localized_blog_post

      if @localized_blog_post.update_attributes blog_post_params[:localized_blog_post]
        flash[:notice] = 'Blog post has been updated'
        redirect_to casein_blog_posts_path
      else
        flash.now[:warning] = 'There were problems when trying to update this blog post'
        render action: :show
      end
    end

    def destroy
      @blog_post = BlogPost.find params[:id]

      @blog_post.destroy
      flash[:notice] = 'Blog post has been deleted'
      redirect_to casein_blog_posts_path
    end

    private

    def get_blog_post
      @blog_post_id = params[:blog_post][:localized_blog_post][:blog_post_id] rescue params[:id]
      @blog_post = !@blog_post_id.empty? ? BlogPost.find(@blog_post_id) : BlogPost.create
    end

    def blog_post_params
      params.require(:blog_post).permit(:photo, :photo_cache, localized_blog_post: [:title, :content, :locale, :blog_post_id])
    end
  end
end
